Given an integer n return the number of STRUCTUREALLY unique binary search trees which has
exactly n nodes from 1 to n.

Recall:
a BST is a tree with one root and where each node either has 0, 1, or 2 children.
The left child is always less than or equal to the right parent and the right child is
always greater than the parent. Note in this case all values are unique.

Trivial solution:
- We could construct every possible tree and determine which ones are unique.
- Each unique tree will have a unique root.
- Each tree of a certain size will always have the same number of permutations.

Example:
Let n = 4. Then we could have:
0-1-3 = f(0)*f(3) = 5
1-1-2 = f(1)*f(2) = 2
2-1-1 = f(2)*f(1) = 2
3-1-0 = f(3)*f(0) = 5
Total = 14
Recurse:
Let n = 3:
0-1-2
1-1-1
2-1-0
Let n = 2
0-1-1
1-1-
Let n = 1
0-1-0

Recursive solution:
for j = 0 to n-1:
    f(n) += f(0)*f(n-1-j)

We should use a dynamic solution.

Complete! Beats 100% on time and 88% on space.
